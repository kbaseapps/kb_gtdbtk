'''
Create a KBase Report for a GTDB-tk run.
'''

import uuid

from shutil import copyfile
from typing import Dict, List, Callable
from pathlib import Path
from kb_gtdbtk.core.kb_client_set import KBClients


def generate_report(
        clients: KBClients,
        gtdbtk_output_dir: Path,
        workspace_id: int,
        objects_created: List[Dict[str,str]],
        uuid_gen: Callable[[], uuid.UUID] = uuid.uuid4):
    '''
    Create a KBase report for a GTDB-tk run.

    :param clients: The KBase client set.
    :param gtdbtk_output_dir: The directory containing the GTDB-tk results as JSON files,
        generated by kb_gtdbtk.core.gtdbtk_runner.run_gtdbtk.
    :param workspace_id: The ID of the workspace in which to save the report.
    '''

    # don't document uuid_gen, meant for testing only
    # TODO input checking
    report_name = 'GTDBTk_report_' + str(uuid_gen())
    copyfile(Path(__file__).parent / 'index.html', gtdbtk_output_dir / 'index.html')

    upload_ret = clients.dfu().file_to_shock({'file_path': str(gtdbtk_output_dir),
                                              'make_handle': 0,
                                              'pack': 'zip'})
    
    output_file_archive = {
        'shock_id': upload_ret['shock_id'],
        'name': 'GTDB-Tk_classify_wf.zip',
        'description': 'GTDB-Tk Classify WF output'
        }
    
    html_file = {
        'path': str(gtdbtk_output_dir),
        'name': 'index.html',
        'label': 'index.html',
        'description': 'HTML report for GTDBTk Classify'
        }

    report_params = {
                    'direct_html_link_index': 0,
                    'html_links': [html_file],
                    'file_links': [output_file_archive],
                    'report_object_name': report_name,
                    'workspace_id': workspace_id
    }
    if objects_created is not None:
        report_params['objects_created'] = objects_created
    
    report_info = clients.report().create_extended_report(report_params)

    return {
        'report_name': report_info['name'],
        'report_ref': report_info['ref'],
        'archive_shock_id': upload_ret['shock_id']
    }
